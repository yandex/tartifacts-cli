#!/usr/bin/env node
'use strict';

const meow = require('meow');

const getArtifactsInfo = require('../lib/cli').getArtifactsInfo;
const getOptions = require('../lib/cli').getOptions;
const writeArtifacts = require('../lib').writeArtifacts;
const signals = require('../lib/constants/signals');

const help = `
    Usage
      $ tartifacts

    Options
      --follow-symlinks Follow symlinked files and directories
      --dot-files       Include dotfiles
      --empty-dirs      Include empty directories
      --empty-files     Include empty files
      --watch           Watch mode; signals to stop the process: ${signals.join(', ')}

    Options (config mode)
      -c, --config    Path to config with artifacts info
      -r, --root      Path to root directory for artifacts patterns
      -d, --dest-dir  Path to destination directory for artifacts from config

    Options (single mode)
      -p, --patterns  Path to file with includes and excludes patterns of artifact
      -i, --include   Paths to inlcude files of artifact
      -e, --exclude   Paths to exclude files of artifact
      -o, --output    Path to destination artifact file or directory

    Examples
      $ tartifacts --config artifacts.json --dest-dir dist/
      $ tartifacts --include "lib/**" --exclude "node_modules/" --output artifact.tar.gz
      $ tartifacts --patterns ./patterns.txt --output=artifact.tar.gz
`;

const cli = meow(help, {
    description: 'ðŸ“¦  The tool to create artifacts for your assemblies',
    flags: {
		help: {
            type: 'boolean',
            alias: 'h'
        },
        version: {
            type: 'boolean',
            alias: 'v'
        },
        config: {
            type: 'string',
            alias: 'c'
        },
        root: {
            type: 'string',
            alias: 'r'
        },
        'dest-dir': {
            type: 'string',
            alias: 'd'
        },
        patterns: {
            type: 'string',
            alias: 'd'
        },
        include: {
            type: 'string',
            alias: 'i'
        },
        exclude: {
            type: 'string',
            alias: 'e'
        },
        output: {
            type: 'string',
            alias: 'o'
        },
        'follow-symlinks': {
            type: 'boolean',
            default: false
        },
        'dot-files': {
            type: 'boolean',
            default: true
        },
        'empty-dirs': {
            type: 'boolean',
            default: true
        },
        'empty-files': {
            type: 'boolean',
            default: true
        },
        'watch': {
            type: 'boolean',
            default: false
        }
	}
});

const flags = cli.flags;
const options = getOptions(flags);

if (options.watch) {
    options.watch = { startTime: Date.now() };
}

if (process.argv.length === 2) {
    return cli.showHelp();
}

getArtifactsInfo(flags)
    .then(artifacts => writeArtifacts(artifacts, options));
